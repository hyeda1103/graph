// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class BatchMatMulOptions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): BatchMatMulOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsBatchMatMulOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: BatchMatMulOptions,
  ): BatchMatMulOptions {
    return (obj || new BatchMatMulOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsBatchMatMulOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: BatchMatMulOptions,
  ): BatchMatMulOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new BatchMatMulOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  adjX(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  adjY(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  asymmetricQuantizeInputs(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startBatchMatMulOptions(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addAdjX(builder: flatbuffers.Builder, adjX: boolean) {
    builder.addFieldInt8(0, +adjX, +false);
  }

  static addAdjY(builder: flatbuffers.Builder, adjY: boolean) {
    builder.addFieldInt8(1, +adjY, +false);
  }

  static addAsymmetricQuantizeInputs(
    builder: flatbuffers.Builder,
    asymmetricQuantizeInputs: boolean,
  ) {
    builder.addFieldInt8(2, +asymmetricQuantizeInputs, +false);
  }

  static endBatchMatMulOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createBatchMatMulOptions(
    builder: flatbuffers.Builder,
    adjX: boolean,
    adjY: boolean,
    asymmetricQuantizeInputs: boolean,
  ): flatbuffers.Offset {
    BatchMatMulOptions.startBatchMatMulOptions(builder);
    BatchMatMulOptions.addAdjX(builder, adjX);
    BatchMatMulOptions.addAdjY(builder, adjY);
    BatchMatMulOptions.addAsymmetricQuantizeInputs(builder, asymmetricQuantizeInputs);
    return BatchMatMulOptions.endBatchMatMulOptions(builder);
  }
}
