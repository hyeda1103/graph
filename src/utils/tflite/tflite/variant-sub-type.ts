// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { TensorType } from "@/utils/tflite/tflite/tensor-type";

export class VariantSubType {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): VariantSubType {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsVariantSubType(bb: flatbuffers.ByteBuffer, obj?: VariantSubType): VariantSubType {
    return (obj || new VariantSubType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsVariantSubType(
    bb: flatbuffers.ByteBuffer,
    obj?: VariantSubType,
  ): VariantSubType {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new VariantSubType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  shape(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  shapeLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  shapeArray(): Int32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Int32Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  type(): TensorType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : TensorType.FLOAT32;
  }

  hasRank(): boolean {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
  }

  static startVariantSubType(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, shapeOffset, 0);
  }

  static createShapeVector(
    builder: flatbuffers.Builder,
    data: number[] | Int32Array,
  ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createShapeVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset;
  static createShapeVector(
    builder: flatbuffers.Builder,
    data: number[] | Int32Array | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]!);
    }
    return builder.endVector();
  }

  static startShapeVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static addType(builder: flatbuffers.Builder, type: TensorType) {
    builder.addFieldInt8(1, type, TensorType.FLOAT32);
  }

  static addHasRank(builder: flatbuffers.Builder, hasRank: boolean) {
    builder.addFieldInt8(2, +hasRank, +false);
  }

  static endVariantSubType(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createVariantSubType(
    builder: flatbuffers.Builder,
    shapeOffset: flatbuffers.Offset,
    type: TensorType,
    hasRank: boolean,
  ): flatbuffers.Offset {
    VariantSubType.startVariantSubType(builder);
    VariantSubType.addShape(builder, shapeOffset);
    VariantSubType.addType(builder, type);
    VariantSubType.addHasRank(builder, hasRank);
    return VariantSubType.endVariantSubType(builder);
  }
}
