// automatically generated by the FlatBuffers compiler, do not modify

import "flatbuffers";

export class StablehloPadOptions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): StablehloPadOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsStablehloPadOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: StablehloPadOptions,
  ): StablehloPadOptions {
    return (obj || new StablehloPadOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsStablehloPadOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: StablehloPadOptions,
  ): StablehloPadOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new StablehloPadOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  edgePaddingLow(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  edgePaddingLowLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  edgePaddingHigh(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  edgePaddingHighLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  interiorPadding(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  interiorPaddingLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startStablehloPadOptions(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addEdgePaddingLow(builder: flatbuffers.Builder, edgePaddingLowOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, edgePaddingLowOffset, 0);
  }

  static createEdgePaddingLowVector(
    builder: flatbuffers.Builder,
    data: bigint[],
  ): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startEdgePaddingLowVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static addEdgePaddingHigh(
    builder: flatbuffers.Builder,
    edgePaddingHighOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, edgePaddingHighOffset, 0);
  }

  static createEdgePaddingHighVector(
    builder: flatbuffers.Builder,
    data: bigint[],
  ): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startEdgePaddingHighVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static addInteriorPadding(
    builder: flatbuffers.Builder,
    interiorPaddingOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, interiorPaddingOffset, 0);
  }

  static createInteriorPaddingVector(
    builder: flatbuffers.Builder,
    data: bigint[],
  ): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startInteriorPaddingVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static endStablehloPadOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createStablehloPadOptions(
    builder: flatbuffers.Builder,
    edgePaddingLowOffset: flatbuffers.Offset,
    edgePaddingHighOffset: flatbuffers.Offset,
    interiorPaddingOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    StablehloPadOptions.startStablehloPadOptions(builder);
    StablehloPadOptions.addEdgePaddingLow(builder, edgePaddingLowOffset);
    StablehloPadOptions.addEdgePaddingHigh(builder, edgePaddingHighOffset);
    StablehloPadOptions.addInteriorPadding(builder, interiorPaddingOffset);
    return StablehloPadOptions.endStablehloPadOptions(builder);
  }
}
