// automatically generated by the FlatBuffers compiler, do not modify

import "flatbuffers";

export class BucketizeOptions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): BucketizeOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsBucketizeOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: BucketizeOptions,
  ): BucketizeOptions {
    return (obj || new BucketizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsBucketizeOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: BucketizeOptions,
  ): BucketizeOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new BucketizeOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  boundaries(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
  }

  boundariesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  boundariesArray(): Float32Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? new Float32Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  static startBucketizeOptions(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addBoundaries(builder: flatbuffers.Builder, boundariesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, boundariesOffset, 0);
  }

  static createBoundariesVector(
    builder: flatbuffers.Builder,
    data: number[] | Float32Array,
  ): flatbuffers.Offset;
  /**
   * @deprecated This Uint8Array overload will be removed in the future.
   */
  static createBoundariesVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset;
  static createBoundariesVector(
    builder: flatbuffers.Builder,
    data: number[] | Float32Array | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addFloat32(data[i]!);
    }
    return builder.endVector();
  }

  static startBoundariesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endBucketizeOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createBucketizeOptions(
    builder: flatbuffers.Builder,
    boundariesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    BucketizeOptions.startBucketizeOptions(builder);
    BucketizeOptions.addBoundaries(builder, boundariesOffset);
    return BucketizeOptions.endBucketizeOptions(builder);
  }
}
