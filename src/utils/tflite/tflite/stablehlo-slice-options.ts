// automatically generated by the FlatBuffers compiler, do not modify

import "flatbuffers";

export class StablehloSliceOptions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): StablehloSliceOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsStablehloSliceOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: StablehloSliceOptions,
  ): StablehloSliceOptions {
    return (obj || new StablehloSliceOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsStablehloSliceOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: StablehloSliceOptions,
  ): StablehloSliceOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new StablehloSliceOptions()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  startIndices(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  startIndicesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  limitIndices(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  limitIndicesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  strides(index: number): bigint | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8)
      : BigInt(0);
  }

  stridesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startStablehloSliceOptions(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addStartIndices(builder: flatbuffers.Builder, startIndicesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, startIndicesOffset, 0);
  }

  static createStartIndicesVector(
    builder: flatbuffers.Builder,
    data: bigint[],
  ): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startStartIndicesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static addLimitIndices(builder: flatbuffers.Builder, limitIndicesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, limitIndicesOffset, 0);
  }

  static createLimitIndicesVector(
    builder: flatbuffers.Builder,
    data: bigint[],
  ): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startLimitIndicesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static addStrides(builder: flatbuffers.Builder, stridesOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, stridesOffset, 0);
  }

  static createStridesVector(builder: flatbuffers.Builder, data: bigint[]): flatbuffers.Offset {
    builder.startVector(8, data.length, 8);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt64(data[i]!);
    }
    return builder.endVector();
  }

  static startStridesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(8, numElems, 8);
  }

  static endStablehloSliceOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createStablehloSliceOptions(
    builder: flatbuffers.Builder,
    startIndicesOffset: flatbuffers.Offset,
    limitIndicesOffset: flatbuffers.Offset,
    stridesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    StablehloSliceOptions.startStablehloSliceOptions(builder);
    StablehloSliceOptions.addStartIndices(builder, startIndicesOffset);
    StablehloSliceOptions.addLimitIndices(builder, limitIndicesOffset);
    StablehloSliceOptions.addStrides(builder, stridesOffset);
    return StablehloSliceOptions.endStablehloSliceOptions(builder);
  }
}
