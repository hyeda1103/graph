// automatically generated by the FlatBuffers compiler, do not modify

import "flatbuffers";

export class RandomOptions {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): RandomOptions {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsRandomOptions(bb: flatbuffers.ByteBuffer, obj?: RandomOptions): RandomOptions {
    return (obj || new RandomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsRandomOptions(
    bb: flatbuffers.ByteBuffer,
    obj?: RandomOptions,
  ): RandomOptions {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new RandomOptions()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  seed(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
  }

  seed2(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
  }

  static startRandomOptions(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addSeed(builder: flatbuffers.Builder, seed: bigint) {
    builder.addFieldInt64(0, seed, BigInt("0"));
  }

  static addSeed2(builder: flatbuffers.Builder, seed2: bigint) {
    builder.addFieldInt64(1, seed2, BigInt("0"));
  }

  static endRandomOptions(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createRandomOptions(
    builder: flatbuffers.Builder,
    seed: bigint,
    seed2: bigint,
  ): flatbuffers.Offset {
    RandomOptions.startRandomOptions(builder);
    RandomOptions.addSeed(builder, seed);
    RandomOptions.addSeed2(builder, seed2);
    return RandomOptions.endRandomOptions(builder);
  }
}
